// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model person {
  id                        Int                 @id @default(autoincrement())
  name                      String
  email                     String              @unique
  password                  String
  backup_email              String?
  contact                   String
  dob                       DateTime            @db.Date

  ssn                       String              @default("000-00-0000")
  no_ssn_reason             String?

  isVerified                Boolean             @default(false)
  verificationToken         String?
  verificationExpiry        DateTime?

  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?

  // Legal documents
  is_US_citizen             Boolean?
  drivers_license           String?
  state_id                  String?
  passport                  String?
  visa                      String?
  is_International_student  Boolean?
  i_20                      String?
  balance_statement         String

  // Contacts
  emergency_contact         auxPerson?          @relation("EmergencyContact", fields: [e_con_id], references: [id])
  e_con_id                  Int?
  prev_landlord             auxPerson?          @relation("PreviousLandlord", fields: [landlord_id], references: [id])
  landlord_id               Int?
  no_residence_detail       String?

  // Tenant details
  is_active_tenant          Boolean             @default(false)
  property_rented           property[]

  // Relations to other models
  transactions              transaction[]
  maintenance_requests      maintenance[]
  messages_received         message[]           @relation("ReceivedMessages")
  notifications             notificationRead[]  @relation("PersonsNotificationReads")
}

model property {
  id                    Int         @id @default(autoincrement())
  name                  String
  description           String?
  leased                Boolean
  leased_by             person?     @relation(fields: [tenant_id], references: [id])
  tenant_id             Int?

  lot_size              Float
  structure_area        Float?
  parking_feature       String?
  stories               Int?
  home_type             String
  sewer                 String?
  water                 String?

  state                 String
  city                  String
  location              String?

  bedrooms              Int
  bathrooms             Int
  basement_type         String?
  heating_feature       String?
  cooling_feature       String?
  parcel_number         Float
  patio_porch           String
  attached_structure    Boolean
  property_subtype      String
  architecture_style    String
  year_built            String
  warrenty              Boolean

  construction_material String?
  roof                  String?

  monthly_rent          Int

  assets                asset[]

  maintenance_requests  maintenance[]
  transactions          transaction[]
}

model asset {
  id            Int       @id @default(autoincrement())
  name          String
  link          String
  property      property  @relation(fields: [property_id], references: [id], onDelete: Cascade)
  property_id   Int
}

model admin{
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  loginCode     String?
  loginExpiry   String?
}


model auxPerson {
  id            Int           @id @default(autoincrement())
  contact       String
  email         String?
  name          String
  contact_of    person[]      @relation("EmergencyContact")
  landlord_of   person[]      @relation("PreviousLandlord")
  person_type   auxPersonType
  state         String
  region        String
  sub_division  String?
}

enum auxPersonType {
  Landlord
  Emergency_Contact
}

model maintenance {
  id                  Int               @id @default(autoincrement())
  request_date        DateTime          @default(now())
  type                String
  title               String
  description         String
  status              maintenanceStatus @default(Pending)
  person              person            @relation(fields: [person_id], references: [id])
  person_id           Int
  property            property          @relation(fields: [property_id], references: [id])
  property_id         Int
  resolution_date     DateTime?
  cost                Int?
}

enum maintenanceStatus {
  Pending
  In_Progress
  Resolved
  Cancelled
}

model transaction {
  id                  Int       @id @default(autoincrement())
  amount              Float
  transaction_date    DateTime  @default(now())
  person              person    @relation(fields: [person_id], references: [id])
  person_id           Int
  property            property  @relation(fields: [property_id], references: [id])
  property_id         Int
  transaction_id      String
}

model message {
  id          Int       @id @default(autoincrement())
  content     String
  created_at  DateTime  @default(now())
  receiver    person    @relation("ReceivedMessages", fields: [receiver_id], references: [id])
  receiver_id Int
}

model notification {
  id          Int                   @id @default(autoincrement())
  content     String
  created_at  DateTime              @default(now())
  reads       notificationRead[]
}

model notificationRead {
  id              Int           @id @default(autoincrement())
  personId        Int
  notificationId  Int
  read            Boolean
  person          person        @relation("PersonsNotificationReads", fields: [personId], references: [id])
  notification    notification  @relation(fields: [notificationId], references: [id])

  @@unique([personId, notificationId]) // ensure each person can only have one read status
}

